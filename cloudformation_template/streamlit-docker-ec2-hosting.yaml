AWSTemplateFormatVersion: '2010-09-09'
Description: EC2 instance with Docker to run a Streamlit app

Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair
    Type: AWS::EC2::KeyPair::KeyName
  AMIImage:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/canonical/ubuntu/server/22.04/stable/current/amd64/hvm/ebs-gp2/ami-id

Resources:
  AdminUser:
    Type: AWS::IAM::User
    Properties:
      UserName: admin-project-user
      Path: '/'

  AdminPolicyAttachment:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: AdminUserPolicy
      Users:
        - !Ref AdminUser
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action: "*"
            Resource: "*"

  AdminAccessKey:
    Type: AWS::IAM::AccessKey
    Properties:
      UserName: !Ref AdminUser

  StreamlitSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow SSH and Streamlit traffic
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8501
          ToPort: 8501
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 5000
          ToPort: 5000
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  StreamlitInstance:
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Init:
        config:
          packages:
            apt:
              python3: []
              python3-pip: []
              python3-venv: []
              docker.io: []
              unzip: []
              nginx: []
              git: []
              jq: []
              curl: []
          commands:
            01_start_docker:
              command: |
                systemctl start docker
                systemctl enable docker
                usermod -aG docker ubuntu
                
            02_install_packages:
              command: "/home/ubuntu/mlflow-folder/ml-env/bin/pip install mlflow boto3 pandas scikit-learn dvc[gs,s3]"
          files:
            /etc/systemd/system/mlflow.service:
              mode: '000644'
              owner: root
              group: root
              content: |
                [Unit]
                Description=MLflow Tracking Server
                After=network.target

                [Service]
                User=ubuntu
                ExecStart=/home/ubuntu/mlflow-folder/ml-env/bin/mlflow server \
                --backend-store-uri sqlite:////home/ubuntu/mlflow.db \
                --default-artifact-root s3://mlflow-tracker-s3 \
                --host 0.0.0.0 --port 5000

                WorkingDirectory=/home/ubuntu
                Restart=always
                StandardOutput=append:/home/ubuntu/mlflow.log
                StandardError=append:/home/ubuntu/mlflow.log

                [Install]
                WantedBy=multi-user.target
          services:
            sysvinit:
              docker:
                enabled: true
                ensureRunning: true
            systemd:
              mlflow:
                enabled: true
                ensureRunning: true
    Properties:
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      SecurityGroups: [!Ref StreamlitSecurityGroup]
      ImageId: !Ref AMIImage
      IamInstanceProfile: !Ref MLflowInstanceProfile
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 30
            VolumeType: gp2
            DeleteOnTermination: true
      Tags:
        - Key: Name
          Value: streamlit-mlflow-server
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          exec > >(tee /var/log/user-data.log | logger -t user-data -s 2>/dev/console) 2>&1
          set -xe
          export DEBIAN_FRONTEND=noninteractive

          apt-get update -y
          apt-get install -y python3.11 python3.11-venv git docker.io unzip jq curl

          python3.11 -m pip install --upgrade pip

          mkdir -p /home/ubuntu/mlflow-folder
          chown ubuntu:ubuntu /home/ubuntu/mlflow-folder
          chmod 755 /home/ubuntu/mlflow-folder

          python3.11 -m venv /home/ubuntu/mlflow-folder/ml-env
          chown -R ubuntu:ubuntu /home/ubuntu/mlflow-folder/ml-env

          /home/ubuntu/mlflow-folder/ml-env/bin/pip install mlflow boto3 pandas scikit-learn dvc[gs,s3]

          # Optional: Install cfn-init manually if needed
          /home/ubuntu/mlflow-folder/ml-env/bin/pip install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-py3-latest.tar.gz
          ln -s /usr/local/bin/cfn-init /opt/aws/bin/cfn-init || true

          /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource StreamlitInstance --region ${AWS::Region}
          systemctl daemon-reexec
          systemctl daemon-reload
          systemctl enable mlflow
          systemctl start mlflow

          # Fetch secret
          SECRET_JSON=$(aws secretsmanager get-secret-value \
            --secret-id ${AWS::StackName}-AdminUserAccessKeys \
            --region ${AWS::Region} \
            --query SecretString --output text)

          export AWS_ACCESS_KEY_ID=$(echo $SECRET_JSON | jq -r .AccessKeyId)
          export AWS_SECRET_ACCESS_KEY=$(echo $SECRET_JSON | jq -r .SecretAccessKey)

          # Clone app
          cd /home/ubuntu/mlflow-folder
          if [ -d app/.git ]; then
            cd app && git pull origin main
          else
            git clone https://github.com/Aishwarya1223/Used-Car-Price-Prediction-System app && cd app
          fi

          chown -R ubuntu:ubuntu /home/ubuntu/mlflow-folder/app
          git config --global --add safe.directory /home/ubuntu/mlflow-folder/app

          # Pull DVC data
          /home/ubuntu/mlflow-folder/ml-env/bin/dvc pull

          # Build and run Streamlit app
          cd /home/ubuntu/mlflow-folder/app
          docker build -t used-car-predict-app .
          docker run -d -p 8501:8501 --restart=always used-car-predict-app

          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource StreamlitInstance --region ${AWS::Region}


  MyEIP:
    Type: AWS::EC2::EIP
    Properties:
      InstanceId: !Ref StreamlitInstance

  MlflowEC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      Path: '/'
      Policies:
        - PolicyName: MlflowS3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:ListBucket
                Resource:
                  - !Sub arn:aws:s3:::mlflow-tracker-s3
                  - !Sub arn:aws:s3:::mlflow-tracker-s3/*
        - PolicyName: SecretAccessPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: !Ref StoreAdminSecret
        - PolicyName: CFNInitAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - cloudformation:DescribeStackResource
                Resource: "*"

  StoreAdminSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub "${AWS::StackName}-AdminUserAccessKeys"
      Description: "Access keys for admin-user"
      SecretString: !Sub |
        {
          "AccessKeyId": "${AdminAccessKey}",
          "SecretAccessKey": "${AdminAccessKey.SecretAccessKey}"
        }
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete

  MLflowInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles: [!Ref MlflowEC2Role]

  MyS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: mlflow-tracker-s3
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerPreferred

Outputs:
  InstancePublicIP:
    Description: Public IP of the EC2 instance
    Value: !GetAtt StreamlitInstance.PublicIp

  AppURL:
    Description: URL to access the Streamlit app
    Value: !Sub "http://${StreamlitInstance.PublicIp}:8501"
