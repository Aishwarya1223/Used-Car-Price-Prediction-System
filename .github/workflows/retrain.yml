name: Auto Retrain Model

on:
  push:
    branches: [main]
  schedule:
    - cron: "0 0 * * SUN"
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  IMAGE_TAG: latest
  STACK_NAME: ec2-server-hosting
  TEMPLATE_FILE: cloudformation template/streamlit-docker-ec2-hosting.yaml

jobs:
  retrain:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
          MYSQL_DATABASE: ${{ secrets.MYSQL_DB }}
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11.1'
          cache: 'pip'

      - name: Install Dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install --no-cache-dir https://h2o-release.s3.amazonaws.com/h2o/rel-3.46.0/7/Python/h2o-3.46.0.7-py2.py3-none-any.whl
          pip install "dvc[dagshub,s3]"  # or [s3]/[gdrive] depending on your remote

      - name: Export MySQL env variables
        run: |
          echo "MYSQL_USER=${{ secrets.MYSQL_USER }}" >> $GITHUB_ENV
          echo "MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}" >> $GITHUB_ENV
          echo "MYSQL_HOST=localhost" >> $GITHUB_ENV
          echo "MYSQL_PORT=3306" >> $GITHUB_ENV
          echo "MYSQL_DB=${{ secrets.MYSQL_DB }}" >> $GITHUB_ENV

      - name: Insert data into MySQL via script
        run: python connect_to_sql.py

      - name: Deploy CloudFormation Stack
        run: |
          aws cloudformation deploy \
            --stack-name $STACK_NAME \
            --template-file $TEMPLATE_FILE \
            --capabilities CAPABILITY_IAM \
            --region $AWS_REGION \
            --no-fail-on-empty-changeset

      - name: Get EC2 Public IP from CloudFormation output
        id: get-ec2-ip
        run: |
          IP=$(aws cloudformation describe-stacks \
            --stack-name $STACK_NAME \
            --region $AWS_REGION \
            --query "Stacks[0].Outputs[?OutputKey=='InstancePublicIP'].OutputValue" \
            --output text)
          echo "MLFLOW_TRACKING_URI=http://${IP}:5000" >> $GITHUB_ENV
          
      - name: Verify MLflow is reachable
        run: curl --fail $MLFLOW_TRACKING_URI

      - name: Pull models and data from DVC remote
        run: dvc pull

      - name: Train model and log to MLflow
        run: python train2.py

      - name: Track best model with DVC
        run: |
          dvc add models/best_model.pkl

      - name: Configure Git
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"

      - name: Commit DVC metadata
        run: |
          git add models/best_model.pkl.dvc dvc.lock
          git diff --cached --quiet || git commit -m "Auto: update best_model.pkl on $(date -u +'%Y-%m-%d %H:%M:%S')"

      - name: Push Git changes to GitHub
        env:
          GH_PAT: ${{ secrets.GH_PAT }}
        run: |
          git remote set-url origin https://x-access-token:${GH_PAT}@github.com/${{ github.repository }}
          git push origin main

      - name: Push model to DVC remote
        run: |
          dvc push
